/**
 * This file was generated by kysely-codegen.
 */

import type { ColumnType } from "kysely";

// Typing stuffs

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

// ENUMS

export type ChatType = "Contact" | "Group";
export type ParticipantRole = "ADMIN" | "MEMBER" | "SUPERADMIN";

// TABLES
// Baileys session stuffs

export interface Cred {
  session_name: string;
  session_string: string;
}

export interface AppStateSyncKey {
  id: Generated<Int8>;
  name: string;
  content: string;
  creds_name: string;
}

export interface AppStateSyncVersion {
  id: Generated<Int8>;
  name: string;
  content: string;
  creds_name: string;
}

export interface PreKey {
  id: Generated<Int8>;
  name: string;
  content: string;
  creds_name: string;
}

export interface SenderKey {
  id: Generated<Int8>;
  name: string;
  content: string;
  creds_name: string;
}

export interface SenderKeyMemory {
  id: Generated<Int8>;
  name: string;
  content: string;
  creds_name: string;
}

export interface Session {
  id: Generated<Int8>;
  name: string;
  content: string;
  creds_name: string;
}

// Entities

export interface Entity {
  id: Generated<Int8>;
  type: ChatType;
  remote_jid: string;
  creds_name: string;
}

export interface Contact {
  id: Generated<Int8>;
  entity_id: Int8;
  remote_jid: string;
  creds_name: string;
  created_at: Generated<Timestamp>;
  updated_at: Generated<Timestamp>;
  saved_name: string;
  server_name: string;
  signin_code: string;
}

export interface Group {
  id: Generated<Int8>;
  entity_id: Int8;
  remote_jid: string;
  creds_name: string;
  created_at: Generated<Timestamp>;
  updated_at: Generated<Timestamp>;
  owner: string;
  subject: string;
  subject_owner: string | null;
  subject_time: Timestamp | null;
  desc: string | null;
  desc_owner: string | null;
  size: Generated<number>;
  creation: Timestamp | null;
  /**
   * If this fields true, then the group doesn't allow members to send message. Vice versa.
   */
  announce: Generated<boolean>;
  /**
   * If this field is true, then only admin can edit the group's info (such as title, picture, descriptions, etc.) and vice versa
   */
  restrict: Generated<boolean>;
  /**
   * True if joining the group need approval first.
   */
  join_approval_mode: Generated<boolean>;
  /**
   * True if only admin can add new member and vice versa
   */
  member_add_mode: Generated<boolean>;
  ephemeral_duration: Generated<number>;
  is_community: Generated<boolean>;
  /**
   * Still doesn't know the meaning of this field.
   */
  is_community_announce: Generated<boolean>;
  linked_parent: string | null;
  invite_code: string | null;
}

export interface Participant {
  id: Generated<Int8>;
  group_id: Int8;
  participant_jid: string;
  role: ParticipantRole;
}

// Message

export interface Message {
  id: Generated<Int8>;
  created_at: Generated<Timestamp>;
  updated_at: Generated<Timestamp>;
  entity_id: Int8;
  message_id: string;
  message: string;
  deleted: Generated<boolean | null>;
}

export interface RequestViewOnce {
  id: Generated<Int8>;
  created_at: Generated<Timestamp>;
  entity_id: Int8;
  /**
   * ID of confirmation message
   */
  confirm_id: string;
  message_id: string;
  /**
   * ID of referenced message (it should be a view once message)
   */
  requested_by: string;
  accepted: Generated<boolean>;
}

export interface RequestDeleteMessage {
  id: Generated<Int8>;
  created_at: Generated<Timestamp>;
  confirm_id: string;
  message_id: string;
  entity_id: Int8;
  requested_by: string;
  agrees: Generated<string[]>;
  disagrees: Generated<string[]>;
  done: Generated<boolean>;
}

// Title

export interface Title {
  id: Generated<Int8>;
  group_id: Int8;
  title_name: string;
  claimable: Generated<boolean>;
}

export interface TitleHolder {
  id: Generated<Int8>;
  title_id: Int8;
  participant_id: Int8;
  holding: Generated<boolean>;
}

// Others

export interface EdunexAccount {
  id: Generated<Int8>;
  creds_name: string;
  created_at: Generated<Timestamp>;
  updated_at: Generated<Timestamp>;
  contact_id: Int8;
  token: string;
}

// AIO Types

export interface DB {
  // Baileys session stuffs
  cred: Cred;
  app_state_sync_key: AppStateSyncKey;
  app_state_sync_version: AppStateSyncVersion;
  pre_key: PreKey;
  sender_key: SenderKey;
  sender_key_memory: SenderKeyMemory;
  session: Session;
  // Entities
  entity: Entity;
  contact: Contact;
  group: Group;
  participant: Participant;
  // Message and utils
  message: Message;
  request_view_once: RequestViewOnce;
  request_delete_message: RequestDeleteMessage;
  // Titles
  title: Title;
  title_holder: TitleHolder;
  // Others
  edunex_account: EdunexAccount;
}

export interface Enums {
  ChatType: ChatType;
  ParticipantRole: ParticipantRole;
}
