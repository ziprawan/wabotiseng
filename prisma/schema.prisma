// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

// Enums
enum ParticipantRole {
  MEMBER
  ADMIN
  SUPERADMIN
}

enum ViewOnceMediaType {
  image
  video
  audio
}

// Database models
model Creds {
  credsId String @id @default(auto()) @map("_id") @db.ObjectId

  sessionName   String @unique
  sessionString String

  AppStateSyncKey      AppStateSyncKey[]
  AppStateSyncVersion  AppStateSyncVersion[]
  PreKey               PreKey[]
  SenderKey            SenderKey[]
  SenderKeyMemory      SenderKeyMemory[]
  Session              Session[]
  Contacts             Contact[]
  Groups               Group[]
  Messages             Message[]
  RequestViewOnce      RequestViewOnce[]
  EdunexAccounts       EdunexAccount[]
  RequestDeleteMessage RequestDeleteMessage[]
}

model AppStateSyncKey {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  content String

  creds     Creds  @relation(fields: [credsName], references: [sessionName])
  credsName String

  @@unique([name, credsName])
}

model AppStateSyncVersion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  content String

  creds     Creds  @relation(fields: [credsName], references: [sessionName])
  credsName String

  @@unique([name, credsName])
}

model PreKey {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  content String

  creds     Creds  @relation(fields: [credsName], references: [sessionName])
  credsName String

  @@unique([name, credsName])
}

model SenderKey {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  content String

  creds     Creds  @relation(fields: [credsName], references: [sessionName])
  credsName String

  @@unique([name, credsName])
}

model SenderKeyMemory {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  content String

  creds     Creds  @relation(fields: [credsName], references: [sessionName])
  credsName String

  @@unique([name, credsName])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name    String
  content String

  creds     Creds  @relation(fields: [credsName], references: [sessionName])
  credsName String

  @@unique([name, credsName])
}

// Main Bot Features
model Contact {
  remoteJid String @id @map("_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String?
  pushName String?

  credsName      String
  creds          Creds           @relation(references: [sessionName], fields: [credsName])
  messages       Message[]
  edunexAccounts EdunexAccount[]

  @@unique([credsName, remoteJid])
}

model Participant {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  groupJid       String
  participantJid String
  role           ParticipantRole

  credsName String

  group Group @relation(references: [remoteJid, credsName], fields: [groupJid, credsName])

  @@unique([credsName, groupJid, participantJid])
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Group metadata
  remoteJid    String
  owner        String
  subject      String
  subjectOwner String?
  subjectTime  DateTime?
  desc         String?
  descOwner    String?
  size         Int           @default(1)
  creation     DateTime?
  participants Participant[]

  // Settings
  announce          Boolean @default(false) // Only admin can send messages
  restrict          Boolean @default(false) // Only admin can edit group
  joinApprovalMode  Boolean @default(false) // Wait for admin approval to join
  memberAddMode     Boolean @default(false) // Only admin can invite members
  ephemeralDuration Int? // Disappearing mode interval in seconds

  // misc.
  isCommunity         Boolean @default(false)
  isCommunityAnnounce Boolean @default(false)
  linkedParent        String?

  credsName String
  creds     Creds  @relation(references: [sessionName], fields: [credsName])

  settings         GroupSettings?
  messages         Message[]
  viewOnceRequests RequestViewOnce[]

  @@unique([credsName, remoteJid])
}

model GroupSettings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  remoteJid       String
  allowMentionAll Boolean @default(false)

  credsName String

  group Group @relation(fields: [id], references: [id])

  @@unique([credsName, remoteJid])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messageId String
  remoteJid String
  message   String

  credsName String
  creds     Creds  @relation(references: [sessionName], fields: [credsName])

  group   Group?   @relation(fields: [remoteJid, credsName], references: [remoteJid, credsName])
  contact Contact? @relation(fields: [remoteJid], references: [remoteJid])

  @@unique([messageId, remoteJid, credsName])
}

model RequestViewOnce {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())

  confirmId   String // Message ID of the confirmation message
  messageId   String // Message ID of the view-once message
  chatId      String
  requestedBy String
  accepted    Boolean @default(false)

  credsName String
  creds     Creds  @relation(references: [sessionName], fields: [credsName])

  group Group? @relation(fields: [chatId, credsName], references: [remoteJid, credsName])

  @@unique([confirmId, chatId, credsName])
  @@unique([messageId, chatId, credsName])
}

model RequestDeleteMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())

  chatId      String
  messageId   String
  confirmId   String
  requestedBy String
  agrees      String[] @default([]) // List of participants who agrees
  disagrees   String[] @default([]) // List of participants who disagrees
  done        Boolean  @default(false)

  credsName String
  creds     Creds  @relation(references: [sessionName], fields: [credsName])

  @@unique([confirmId, chatId, credsName])
  @@unique([messageId, chatId, credsName])
}

// Edunex stuffs
model EdunexAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String

  credsName String

  creds Creds   @relation(references: [sessionName], fields: [credsName])
  user  Contact @relation(fields: [userId], references: [remoteJid])

  courseMembers EdunexCourseMember[]

  @@unique([userId, credsName])
}

model EdunexCourseMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  courseId  String @db.ObjectId
  accountId String @db.ObjectId

  course  EdunexCourses @relation(fields: [courseId], references: [id])
  account EdunexAccount @relation(fields: [accountId], references: [id])

  @@unique([courseId, accountId])
}

model EdunexCourses {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  courseId  Int
  updatedAt DateTime

  assignments EdunexAssignments[]
  members     EdunexCourseMember[]
}

model EdunexAssignments {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  dueDate     DateTime
  maxMarks    Int
  weightage   Int

  courseId String @db.ObjectId

  course EdunexCourses? @relation(fields: [courseId], references: [id])
}
